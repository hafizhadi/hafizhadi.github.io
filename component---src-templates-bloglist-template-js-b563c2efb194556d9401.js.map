{"version":3,"sources":["webpack:///./src/templates/bloglistTemplate.js"],"names":["entryElementsCss","blackBoxCss","blackLinkCss","BlogWrapper","BlogEntry","NavigationWrapper","BlogHeaderWrapper","BlogCategoryWrapper","BreadcrumbChild","EntryHeaderWrapper","BlogPage","data","pageContext","posts","allMarkdownRemark","edges","isTag","tag","tagAppend","currentPage","numPages","isFirst","isLast","prevPage","toString","nextPage","title","to","css","map","post","key","node","id","frontmatter","path","date","tags","kebabCase","rel","Array","from","length","_","i","pageQuery"],"mappings":"0RAWMA,EAAgB,2CAShBC,EAAW,4HAWXC,EAAY,8GAaZC,EAAW,6HAOXC,EAAS,wIAQTC,EAAiB,uJAQjBC,EAAiB,6MApDC,8CAoDD,8EA0BjBC,EAAmB,+IAWnBC,EAAe,6IAWfC,EAAkB,wJ,u1BAoFTC,UA7EE,SAAC,GAA2B,IAAzBC,EAAwB,EAAxBA,KAAMC,EAAkB,EAAlBA,YAGhBC,EAAQF,EAAKG,kBAAkBC,MAG/BC,EAAQJ,EAAYI,MACpBC,EAAML,EAAYK,IAClBC,EAAYF,EAAQ,IAAMC,EAAM,GAGhCE,EAAcP,EAAYO,YAC1BC,EAAWR,EAAYQ,SACvBC,EAA0B,IAAhBF,EACVG,EAASH,IAAgBC,EACzBG,EAAWJ,EAAc,GAAM,EAApB,QAAgCD,EAAhC,QAAsDA,EAAtD,KAAoEC,EAAc,GAAGK,WAArF,IACXC,EAAQ,QAAWP,EAAX,KAAyBC,EAAc,GAAGK,WAA1C,IAEd,OACI,YAAC,IAAD,KACI,YAAC,IAAD,CAAKE,MAAM,SACX,YAACvB,EAAD,KACI,YAACG,EAAD,KACI,YAAC,OAAD,CAAMqB,GAAG,SAAQ,kBAAIC,IAAG,YAAE,CAAC,KAAV,aACjB,YAACrB,EAAD,CAAqBqB,IAAG,GACpB,YAAC,OAAD,CAAMD,GAAG,SAAQ,kBAAIC,IAAG,YAAE,CAAC1B,EAAkB,QAAHe,GAAD,KAAxB,SACjB,YAAC,OAAD,CAAMU,GAAG,gBAAe,kBAAIC,IAAG,YAAE,CAAC1B,EAAkB,eAAHe,GAAD,KAAxB,YACxB,YAAC,OAAD,CAAMU,GAAG,aAAY,kBAAIC,IAAG,YAAE,CAAC1B,EAAkB,YAAHe,GAAD,KAAxB,eAG5BD,GACG,YAAC,OAAD,CAAMW,GAAE,IAAMV,GAAO,YAACT,EAAD,CAAiBoB,IAAKA,YAAM3B,EAAR,uDAApB,UAA2GgB,IAEnIJ,EAAMgB,KAAI,SAAAC,GAAI,OACX,YAAC1B,EAAD,CAAW2B,IAAKD,EAAKE,KAAKC,IACtB,YAACxB,EAAD,KACI,YAAC,OAAD,CAAMkB,GAAIG,EAAKE,KAAKE,YAAYC,MAAM,kBAAIP,IAAKA,YAAM5B,EAAR,IAA6BC,IAAgB6B,EAAKE,KAAKE,YAAYR,QAChH,kBAAIE,IAAKA,YAAO5B,EAAT,6BAAP,IAAgE8B,EAAKE,KAAKE,YAAYE,KAAtF,MAGHN,EAAKE,KAAKE,YAAYG,KACnB,mBAAKT,IAAG,GACJ,kBAAIA,IAAG,YAAE,CAAC,KAAV,UACCE,EAAKE,KAAKE,YAAYG,KAAKR,KAAI,SAAAZ,GAAG,OAC/B,YAAC,OAAD,CAAMU,GAAE,IAAMW,oBAAUrB,IAAQ,kBAAIW,IAAG,YAAE,CAAC,EAA2B3B,KAAegB,QAG5F,UAKhB,YAACZ,EAAD,KACI,uBACI,YAAC,OAAD,CAAMuB,IAAKP,GAAO,EAA8BM,GAAIJ,EAAUgB,IAAI,QAC9D,kBAAIX,IAAG,YAAE,CAAC3B,EAAD,KAAT,OAIR,mBAAK2B,IAAG,GACHY,MAAMC,KAAK,CAAEC,OAAQtB,IAAY,SAACuB,EAAGC,GAAJ,OAC9B,YAAC,OAAD,CAAMb,IAAG,qBAAsBa,EAAI,GAAKjB,GAAE,QAAUT,EAAV,KAA6B,IAAN0B,EAAU,GAAIA,EAAI,IAC/E,kBAAIhB,IAAG,YAAE,CAAC3B,EAAD,KAAoE2C,EAAI,QAMzF,YAAC,OAAD,CAAMhB,IAAKN,GAAM,EAA8BK,GAAIF,EAAUc,IAAI,QAC7D,kBAAIX,IAAG,YAAE,CAAC3B,EAAD,KAAT,SAUjB,IAAM4C,EAAS","file":"component---src-templates-bloglist-template-js-b563c2efb194556d9401.js","sourcesContent":["import React from 'react';\r\nimport { kebabCase } from 'lodash';\r\nimport { Link, graphql } from 'gatsby';\r\nimport Layout from '../components/layout';\r\nimport SEO from '../components/seo';\r\n\r\nimport { css } from \"@emotion/core\"\r\nimport styled from \"@emotion/styled\"\r\n\r\n\r\n// STYLING CONSTANTS FOR COMPOSITION\r\nconst entryElementsCss = css`\r\n    margin: 0.25em 0;\r\n`\r\n\r\nconst noMarginPaddingcss = css`\r\n    margin: 0;\r\n    padding: 0;\r\n`\r\n\r\nconst blackBoxCss = css`\r\n    color: white;\r\n    background-color: black;\r\n    padding: 0.2em 0.3em;\r\n\r\n    :hover {\r\n        background-color: gray;\r\n        color:white;\r\n    }\r\n`\r\n\r\nconst blackLinkCss = css`\r\n    color: black;\r\n    padding: 0.1em 0.3em;\r\n    margin: 0;\r\n\r\n    :hover {\r\n        color: white;\r\n        background-color: black;\r\n    }\r\n`\r\n\r\n// STYLED COMPONENTS\r\n\r\nconst BlogWrapper = styled.div`\r\n    display: flex;\r\n\r\n    flex-flow: column wrap;\r\n    justify-content: center;\r\n    `\r\n\r\nconst BlogEntry = styled.article`\r\n    text-align: left;    \r\n\r\n    border: solid 0.2em;\r\n    margin: 0.5em 0;\r\n    padding: 0.5em;\r\n`\r\n\r\nconst NavigationWrapper = styled.div`\r\n    display: flex;\r\n    flex-flow: row wrap;\r\n\r\n    align-items: baseline;\r\n    justify-content: space-between;\r\n`\r\n\r\nconst BlogHeaderWrapper = styled.div`\r\n    display: flex;\r\n    flex-flow: column wrap;\r\n\r\n    align-items: flex-start;\r\n    justify-content: center;\r\n\r\n    h3,\r\n    h5 {\r\n        padding: 0 0 0 0;\r\n        margin: 0 0 0.5em 0;\r\n    }\r\n\r\n    @media all and (min-width: 350px) {\r\n        h3,\r\n        h5 {\r\n            ${noMarginPaddingcss}\r\n        }\r\n\r\n        flex-flow: row nowrap;\r\n\r\n        align-items: baseline;\r\n        justify-content: space-between;\r\n    } \r\n`\r\n\r\nconst BlogCategoryWrapper = styled.div`\r\n    display: flex;\r\n    flex-flow: row nowrap;\r\n\r\n    > {\r\n        :not(:last-child) {\r\n            margin-right: 0.5em;\r\n        }\r\n    }\r\n`\r\n\r\nconst BreadcrumbChild = styled.h5`\r\n    color: black;\r\n    font-weight: bold;\r\n    :hover {\r\n        color: gray;\r\n    }\r\n\r\n    margin 0.25em 0;\r\n    padding 0;\r\n`\r\n\r\nconst EntryHeaderWrapper = styled.div`\r\n    display: flex; \r\n    flex-flow: row wrap; \r\n    justify-content: space-between;\r\n    align-items: flex-start;\r\n`\r\n\r\nconst BlogPage = ({ data, pageContext }) => {\r\n\r\n    // Blog posts\r\n    const posts = data.allMarkdownRemark.edges;\r\n    \r\n    // Helper constant for tag page differentiation\r\n    const isTag = pageContext.isTag;\r\n    const tag = pageContext.tag;\r\n    const tagAppend = isTag ? \"/\" + tag : \"\" \r\n    \r\n    // Navigation constants\r\n    const currentPage = pageContext.currentPage;\r\n    const numPages = pageContext.numPages; \r\n    const isFirst = currentPage === 1;\r\n    const isLast = currentPage === numPages;\r\n    const prevPage = currentPage - 1 === 1 ? `/blog${tagAppend}` : `/blog${tagAppend}/${(currentPage - 1).toString()}/`;\r\n    const nextPage = `/blog${tagAppend}/${(currentPage + 1).toString()}/`;\r\n\r\n    return (\r\n        <Layout>\r\n            <SEO title=\"Blog\" />\r\n            <BlogWrapper>\r\n                <BlogHeaderWrapper>\r\n                    <Link to=\"/blog\"><h3 css={[css`color: black; font-weight: bold; :hover{color:gray;}`]}>Blogroll</h3></Link>\r\n                    <BlogCategoryWrapper css={css`display: flex; flex-flow: row nowrap`}>\r\n                        <Link to=\"/tech\"><h5 css={[blackLinkCss, (tag == `tech`) && css`background-color: black; color: white;`]}>Tech</h5></Link>\r\n                        <Link to=\"/pop-culture\"><h5 css={[blackLinkCss, (tag == `pop-culture`) && css`background-color: black; color: white;`]}>Culture</h5></Link>\r\n                        <Link to=\"/personal\"><h5 css={[blackLinkCss, (tag == `personal`) && css`background-color: black; color: white;`]}>Personal</h5></Link>\r\n                    </BlogCategoryWrapper>\r\n                </BlogHeaderWrapper>\r\n                {isTag && \r\n                    <Link to={`/${tag}`}><BreadcrumbChild css={css`${blackBoxCss}; font-weight: normal; margin: 0; display: inline-block;`}>Topic: {tag}</BreadcrumbChild></Link>\r\n                }\r\n                {posts.map(post => (\r\n                    <BlogEntry key={post.node.id}>\r\n                        <EntryHeaderWrapper>\r\n                            <Link to={post.node.frontmatter.path}><h3 css={css`${entryElementsCss}; ${blackBoxCss}`}>{post.node.frontmatter.title}</h3></Link>\r\n                            <h5 css={css` ${entryElementsCss}; flex-basis: max-content;`}>({post.node.frontmatter.date})</h5>\r\n                        </EntryHeaderWrapper>\r\n\r\n                        {post.node.frontmatter.tags ? (\r\n                            <div css={css`display: flex; flex-flow: row wrap; margin-top: 0.5em; align-items: baseline;`}>\r\n                                <h5 css={[css`margin: 0 0.5em 0 0;`]}>Tags: </h5>  \r\n                                {post.node.frontmatter.tags.map(tag => (\r\n                                    <Link to={`/${kebabCase(tag)}`}><h5 css={[css`margin: 0 0.5em 0 0;`, blackBoxCss]}>{tag}</h5></Link>\r\n                                ))}\r\n                            </div>\r\n                        ) : null}\r\n                    </BlogEntry>\r\n                ))}\r\n            </BlogWrapper>\r\n            \r\n            <NavigationWrapper>\r\n                <div>\r\n                    <Link css={isFirst && css`visibility: hidden;`} to={prevPage} rel=\"prev\"> \r\n                        <h4 css={[blackBoxCss, css`padding: 0.25em 2em; margin: 0;`]}>&#8249;</h4> \r\n                    </Link>\r\n                </div>\r\n\r\n                <div css={css`display: flex; flex-flow: row wrap;`}>\r\n                    {Array.from({ length: numPages }, (_, i) => (\r\n                        <Link key={`pagination-number${i + 1}`} to={`/blog${tagAppend}/${i === 0 ? \"\": i + 1}`}>\r\n                            <h4 css={[blackBoxCss, css`padding: 0.15em 0.4em; margin: 0 0.25em 0 0;`]} >{i + 1}</h4>\r\n                        </Link>\r\n                    ))}\r\n                </div>\r\n                \r\n\r\n                    <Link css={isLast && css`visibility: hidden;`} to={nextPage} rel=\"next\"> \r\n                        <h4 css={[blackBoxCss, css`padding: 0.25em 2em; margin: 0;`]}>&#8250;</h4> \r\n                    </Link>\r\n\r\n            </NavigationWrapper>\r\n        </Layout>\r\n    );\r\n};\r\n\r\nexport default BlogPage;\r\n\r\nexport const pageQuery = graphql`\r\n    query ($skip: Int!, $limit: Int!, $tag:[String!] ) {\r\n        allMarkdownRemark( \r\n            limit: $limit, \r\n            sort: { order: DESC, fields: [frontmatter___date ] }, \r\n            skip: $skip,\r\n            filter: { frontmatter: {     tags: { in: $tag }\r\n                                         type: { eq: \"blog\"}} },\r\n        ) {\r\n            totalCount\r\n            edges {\r\n                node {\r\n                    id\r\n                    excerpt(pruneLength:250)\r\n                    frontmatter {\r\n                        date(formatString: \"MMMM DD, YYYY\")\r\n                        title\r\n                        tags\r\n                        path\r\n                        type\r\n                    }\r\n                }\r\n            }\r\n        }\r\n    }\r\n`;"],"sourceRoot":""}